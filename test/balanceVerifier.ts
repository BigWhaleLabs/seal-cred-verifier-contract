import { expect } from 'chai'
import { ethers } from 'hardhat'

const validProof = {
  a: [
    '0x06cfe73841ac1f6400befdda3d48594b36fb0f6ff826d3ee795014a0e9007d2c',
    '0x05892a617f6d8f90ef5e8740a776df5dce755006b7f7e091b2c8128646f592d7',
  ],
  b: [
    [
      '0x22960094ac1ec5bd0c5a7a2274bc2c34db475bb942770099b1f4c67cc6bda933',
      '0x17fbb6c18701088f705bfbdb57dae037ba0dcd08e799e61c32ef1c04aa4385f5',
    ],
    [
      '0x1d8dda7c50bc3b36ae2ac5ae6f4ae296bc2fd08a1b669d6d3f1b5cd1b1113d88',
      '0x01d5ab451761c0cd12d1237bd6f9dd73350ced95e52ba44e7c9929470be5dfb1',
    ],
  ],
  c: [
    '0x08f6b910104b0c6ef9530a74834d386a15a49fa9bf0316fe134cf32085758c90',
    '0x007bf48196361404a4924899ff41801bf0ec91d46fe597db4cab733451be04d4',
  ],
  input: [
    '0x0000000000000000000000000000000000000000000000000000000000000030',
    '0x0000000000000000000000000000000000000000000000000000000000000078',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000030',
    '0x0000000000000000000000000000000000000000000000000000000000000036',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000036',
    '0x0000000000000000000000000000000000000000000000000000000000000046',
    '0x0000000000000000000000000000000000000000000000000000000000000034',
    '0x0000000000000000000000000000000000000000000000000000000000000035',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000061',
    '0x0000000000000000000000000000000000000000000000000000000000000046',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000031',
    '0x0000000000000000000000000000000000000000000000000000000000000033',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000034',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000039',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000061',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000041',
    '0x0000000000000000000000000000000000000000000000000000000000000034',
    '0x0000000000000000000000000000000000000000000000000000000000000044',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000041',
    '0x0000000000000000000000000000000000000000000000000000000000000031',
    '0x0000000000000000000000000000000000000000000000000000000000000035',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000063',
    '0x0000000000000000000000000000000000000000000000000000000000000036',
    '0x000000000000000000000000000000000000000000000000000000000000006f',
    '0x06a7b38930d31b38b511c8a1b8135dcba80d730ceb7af68f23129782dce7fc8d',
    '0x0ac878536cc194714e665549cb408816c390908785da1d9bc4b0e57770b1f5b5',
    '0x0000000000000000000000000000000000000000000000000000000000000001',
  ],
}
const invalidProof = {
  a: validProof.a,
  b: validProof.b,
  c: [
    '0x184b074c1fac82c2dda436071d098edb4a2955343721ef642e6b844e40a50cc0',
    '0x1e11078629c2031c0eb203d84f745e423440ed52091d06ece6020cd5674fda5f',
  ],
  input: validProof.input,
}

describe('BalanceCheckerVerifier contract', function () {
  before(async function () {
    const factory = await ethers.getContractFactory('BalanceCheckerVerifier')
    this.contract = await factory.deploy()

    await this.contract.deployed()
  })

  it('should successfully verify correct proof', async function () {
    const { a, b, c, input } = validProof
    const params = [a, b, c, input]
    expect(await this.contract.verifyProof(...params)).to.be.equal(true)
  })

  it('should fail to verify incorrect proof', async function () {
    const { a, b, c, input } = invalidProof

    expect(await this.contract.verifyProof(a, b, c, input)).to.be.equal(false)
  })
})
