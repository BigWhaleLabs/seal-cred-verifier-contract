import { expect } from 'chai'
import { ethers } from 'hardhat'

const validProof = {
  a: [
    '0x14d46175932831d091889b25e1236f62e9db2ac5ebae0460ba365ff166711c65',
    '0x2ceddeb5e53e0057a79dc592d3777628953420f23e4d39bb5158f7b3d018e99c',
  ],
  b: [
    [
      '0x126765feb3058cc733ec19751037ae16a81edbd485b6a84ee6a6c2874ef79499',
      '0x05ce3f83a8607b1a53c93e5a98ce29db252fa6888de89d1dfe2af168615eb559',
    ],
    [
      '0x2fd93c3e5d111b0f96aaf14d61780667ffd8343f6fbb02ab03a31cda4e2b3c8a',
      '0x282cdfe436f908a885b70514cb80856155a34073ffd9b94f5f3b0b627b216a8d',
    ],
  ],
  c: [
    '0x18cd8b88811595bfd74230c370a1f57a14fb13e09728beb0a195a36d8b3dc5e7',
    '0x153bcdce3adfad06bc1901f067ed16d3804f2296bb997b688ccb9cfa15e0def3',
  ],
  input: [
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x000000000000000000000000000000000000000000000000000000000000004a',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x000000000000000000000000000000000000000000000000000000000000004e',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000071',
    '0x0000000000000000000000000000000000000000000000000000000000000067',
    '0x0000000000000000000000000000000000000000000000000000000000000072',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000034',
    '0x0000000000000000000000000000000000000000000000000000000000000068',
    '0x000000000000000000000000000000000000000000000000000000000000006d',
    '0x0000000000000000000000000000000000000000000000000000000000000050',
    '0x0000000000000000000000000000000000000000000000000000000000000030',
    '0x0000000000000000000000000000000000000000000000000000000000000078',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000030',
    '0x0000000000000000000000000000000000000000000000000000000000000036',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000036',
    '0x0000000000000000000000000000000000000000000000000000000000000046',
    '0x0000000000000000000000000000000000000000000000000000000000000034',
    '0x0000000000000000000000000000000000000000000000000000000000000035',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000061',
    '0x0000000000000000000000000000000000000000000000000000000000000046',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000031',
    '0x0000000000000000000000000000000000000000000000000000000000000033',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000034',
    '0x0000000000000000000000000000000000000000000000000000000000000037',
    '0x0000000000000000000000000000000000000000000000000000000000000039',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000061',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000041',
    '0x0000000000000000000000000000000000000000000000000000000000000034',
    '0x0000000000000000000000000000000000000000000000000000000000000044',
    '0x0000000000000000000000000000000000000000000000000000000000000065',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000038',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000041',
    '0x0000000000000000000000000000000000000000000000000000000000000031',
    '0x0000000000000000000000000000000000000000000000000000000000000035',
    '0x0000000000000000000000000000000000000000000000000000000000000042',
    '0x0000000000000000000000000000000000000000000000000000000000000032',
    '0x0000000000000000000000000000000000000000000000000000000000000063',
    '0x0000000000000000000000000000000000000000000000000000000000000036',
    '0x1e05243c47d00d8087c7c6a176afe38a47b9bcea0e01d5a7db66260e551516d7',
  ],
}
const invalidProof = {
  a: validProof.a,
  b: validProof.b,
  c: [
    '0x184b074c1fac82c2dda436071d098edb4a2955343721ef642e6b844e40a50cc0',
    '0x1e11078629c2031c0eb203d84f745e423440ed52091d06ece6020cd5674fda5f',
  ],
  input: validProof.input,
}

describe('ERC721OwnershipCheckerVerifier contract', function () {
  before(async function () {
    const factory = await ethers.getContractFactory(
      'ERC721OwnershipCheckerVerifier'
    )
    this.contract = await factory.deploy()

    await this.contract.deployed()
  })

  it('should successfully verify correct proof', async function () {
    const { a, b, c, input } = validProof
    const params = [a, b, c, input]
    expect(await this.contract.verifyProof(...params)).to.be.equal(true)
  })

  it('should fail to verify incorrect proof', async function () {
    const { a, b, c, input } = invalidProof

    expect(await this.contract.verifyProof(a, b, c, input)).to.be.equal(false)
  })
})
