//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.14;
library Pairing {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal pure returns (G1Point memory) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal pure returns (G2Point memory) {
        // Original code point
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );

/*
        // Changed by Jordi point
        return G2Point(
            [10857046999023057135944570762232829481370756359578518086990519993285655852781,
             11559732032986387107991004021392285783925812861821192530917403151452391805634],
            [8495653923123431417604973247489272438418190587263600148770280649306958101930,
             4082367875863433681332203403145435568316851327593401208105741076214120093531]
        );
*/
    }
    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
    function negate(G1Point memory p) internal pure returns (G1Point memory r) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return r the sum of two points of G1
    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-add-failed");
    }
    /// @return r the product of a point on G1 and a scalar, i.e.
    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {
        require(p1.length == p2.length,"pairing-lengths-failed");
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-opcode-failed");
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2,
            G1Point memory d1, G2Point memory d2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}
contract EmailOwnershipCheckerVerifier {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }
    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [4252822878758300859123897981450591353533073413197771768651442665752259397132,
             6375614351688725206403948262868962793625744043794305715222011528459656738731],
            [21847035105528745403288232691147584728191162732299865338377159692350059136679,
             10505242626370262277552901082094356697409835680220590971873171140371331206856]
        );
        vk.gamma2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = Pairing.G2Point(
            [12599857379517512478445603412764121041984228075771497593287716170335433683702,
             7912208710313447447762395792098481825752520616755888860068004689933335666613],
            [11502426145685875357967720478366491326865907869902181704031346886834786027007,
             21679208693936337484429571887537508926366191105267550375038502782696042114705]
        );
        vk.IC = new Pairing.G1Point[](106);
        
        vk.IC[0] = Pairing.G1Point( 
            11342249683271716883364178439619021177519714574558279623279001546231930836864,
            6873725436377546031689457432804425532773128963709076657479068973565608862543
        );                                      
        
        vk.IC[1] = Pairing.G1Point( 
            14310422601034657704801567128888344484500339024570783865798773555325191735290,
            20755064815939140105611715038078505940114985568402163769983675987262624618832
        );                                      
        
        vk.IC[2] = Pairing.G1Point( 
            6412681593923441144484945406806150619702322178570863698908915660247355394436,
            3350583351080793945693804742374249360955939780178786388316298331229964045701
        );                                      
        
        vk.IC[3] = Pairing.G1Point( 
            19773831853353465504783585253507180188101214890120973794094796052150211509378,
            16394649207829697156788108300562901632598801021119938903185315495004560812959
        );                                      
        
        vk.IC[4] = Pairing.G1Point( 
            16876524948848204467541343139310590229705160084167686633739481536847833223910,
            16333555994060052532091489189240690522476781506776819076803088818339758275121
        );                                      
        
        vk.IC[5] = Pairing.G1Point( 
            6257937007763214841878686169612056994756200148801306717299894582018965759122,
            20950891535506204008486984840274471505100941309373368516891949360732036945787
        );                                      
        
        vk.IC[6] = Pairing.G1Point( 
            5110913246951398208707948777291218468290552211525736530413162803664200654423,
            16494089558840719942119708295857891486543541479055645030219949498094512822465
        );                                      
        
        vk.IC[7] = Pairing.G1Point( 
            12683032658604129706537978670477465127175163255001063796613245154180676695400,
            6053458946193869670939782424597631032807298094454157032191606560599579496834
        );                                      
        
        vk.IC[8] = Pairing.G1Point( 
            10341200785075882575033689346981141969297089503972202465505879744272674033240,
            2457038123744987039244150754045653199268521312939640141981947725311752678669
        );                                      
        
        vk.IC[9] = Pairing.G1Point( 
            3818326276994196492943447819909041915747528177574363507262865556965199034371,
            17752150354543889200091837736945873863627843501240369925589349638559594795625
        );                                      
        
        vk.IC[10] = Pairing.G1Point( 
            14074682508630702749715278187605636915461066983982995641706317804009232198179,
            21492137888755698794145014570557417943158136705039111694356180587189060744727
        );                                      
        
        vk.IC[11] = Pairing.G1Point( 
            19025038514037970369156184005917936280036902521425259515575401233428132062414,
            11051034010453405903172880829468578121842823258580166940664059569177540461381
        );                                      
        
        vk.IC[12] = Pairing.G1Point( 
            16628587892093574879962616456457657627296648882809568104140287684001075821505,
            20699310839160361818862709798646755823444940225388387903663886970839967270869
        );                                      
        
        vk.IC[13] = Pairing.G1Point( 
            1986142530855617749244159866393061865838815075033860473987765103367494683379,
            20235939791798826571335282496503893168345997443922738822844859008683470087713
        );                                      
        
        vk.IC[14] = Pairing.G1Point( 
            16205419684858470531888617102266926340785368549145526542300744501294582020642,
            2890890507733295344767500070528777868857631129112217769513993772178745117586
        );                                      
        
        vk.IC[15] = Pairing.G1Point( 
            21444416253254407885218009566756311695726093387365044552576640524855876987157,
            15566206489982817024741676713748876686016198147329126417295093256969897819910
        );                                      
        
        vk.IC[16] = Pairing.G1Point( 
            10040563669217708629102721312563048035223183902724900007077427828481403163320,
            10182433990341508902863320332815395332881235674335363407084487670650557697435
        );                                      
        
        vk.IC[17] = Pairing.G1Point( 
            21120791267113952017520540288347841077528640876182347796142562362303639413557,
            11817362550864604583472176677848135842846329317893705030039176994988203304668
        );                                      
        
        vk.IC[18] = Pairing.G1Point( 
            1112093636068450688036963771769511173533993318020886095540170618693359792985,
            12649209612192853740258332550439247611966051586065349877388651427157193184141
        );                                      
        
        vk.IC[19] = Pairing.G1Point( 
            3446786237261495555919228208788142687751633607796710956093544480404367782311,
            4647288959867280716321128165979755094626420767360258514108285076448982926012
        );                                      
        
        vk.IC[20] = Pairing.G1Point( 
            19351794657368431066458533144357183576575156790667067787336636427186407011363,
            10234272636931682864511693769168693091897826976323037015206668621276822315121
        );                                      
        
        vk.IC[21] = Pairing.G1Point( 
            5606792703333213409188828534722202195046755833602635813221172117751055904516,
            14299807466746508087034526387971348696177995957855463476085636600864611209590
        );                                      
        
        vk.IC[22] = Pairing.G1Point( 
            13764708274395910342852016629775462206140690607055223558377886586778786892076,
            19979131543586176133956188213808768679529994291444679027214776009217087732116
        );                                      
        
        vk.IC[23] = Pairing.G1Point( 
            20552906879377740373644420686151917241931002930229305113723775795801972361225,
            876812206185308284803341295719317791955378773271443305948352925823180166951
        );                                      
        
        vk.IC[24] = Pairing.G1Point( 
            7347834479578747917354398725240922863749192022356008704815617660143161602252,
            2958977525155848303083001629463960577390189459862621252857444960910354238969
        );                                      
        
        vk.IC[25] = Pairing.G1Point( 
            20056429665381882341705657162737865615787158447200916363825687978967330579415,
            12332353873678788106563580040469405520894818977761077698273794115280792685526
        );                                      
        
        vk.IC[26] = Pairing.G1Point( 
            11849969506039116719493704175008282960981972455563250134238007764451356391502,
            12653307446624777009244047453465654683632207424440825141118242428957145241876
        );                                      
        
        vk.IC[27] = Pairing.G1Point( 
            7760441422760681269289315357201425142279656941924143715135998543536483907231,
            3961573768792588988815891922258434064470175544634197976425019483699570811024
        );                                      
        
        vk.IC[28] = Pairing.G1Point( 
            21030073423676143193140893502298678448188835497835834633495628919933706955330,
            164435135050551513403042490542467985622797785396523233668593577900871473970
        );                                      
        
        vk.IC[29] = Pairing.G1Point( 
            656391699530230468866247139863564694815408637228732077780057007171963116971,
            3797382182209791370681442165857440486837821682143988261092952097912317700188
        );                                      
        
        vk.IC[30] = Pairing.G1Point( 
            690259996979478586480532644276232040629557584387487825878449392890782976423,
            16203215372704131215291484105959269003525962832110388724281960171215067093955
        );                                      
        
        vk.IC[31] = Pairing.G1Point( 
            593452045566622552250921953755029201539124489005941195168220072030975219850,
            13868803258356939973602699692875055940109630298700839304377218170838416320881
        );                                      
        
        vk.IC[32] = Pairing.G1Point( 
            8441213938988556863297290674770115845023468828622522011165508886836054104260,
            1557173127666845059131519400099258383809368399399581168549375207911713022156
        );                                      
        
        vk.IC[33] = Pairing.G1Point( 
            18751078119314726747841662393310656430932753787015687910336599840402501820964,
            6440849360842065500019100890270495729723663913852318323808835531834369095415
        );                                      
        
        vk.IC[34] = Pairing.G1Point( 
            5717423814111656329982053977855607606066299568256288166156430413206433965506,
            9553263661244423236426206527075272202569216511023337414577151274507543349905
        );                                      
        
        vk.IC[35] = Pairing.G1Point( 
            8203031736556857895144770204258696979157159141042586769806208148093133375586,
            2581664701411494284297918450907014301378385272735957028136496417834465353514
        );                                      
        
        vk.IC[36] = Pairing.G1Point( 
            13615061123514153416641761346195914427004173549007588218751055518658839839238,
            13932287513862824626753979917996468141540315714965473055172567905335288192883
        );                                      
        
        vk.IC[37] = Pairing.G1Point( 
            581350780272213955932098135836416513211241663557153124380608345014394529193,
            13399897500645866816913140419532774078778244361775226103887425618964618127636
        );                                      
        
        vk.IC[38] = Pairing.G1Point( 
            12378581195333042537758615774596665305040345654191086772742885305710775010860,
            12297471892705679672517942600368092412188905596741290716145252906405909567893
        );                                      
        
        vk.IC[39] = Pairing.G1Point( 
            18324022820703753553536239364688242993254824859967636602785050439896073697007,
            1549125951384144020550019569732914363039384563314037381273524098251426623948
        );                                      
        
        vk.IC[40] = Pairing.G1Point( 
            9884286475763281140366989343293025164421808256579275777153747810129703215986,
            11572124432132017638738249810748915939768913121548452975594118384467933881141
        );                                      
        
        vk.IC[41] = Pairing.G1Point( 
            3845652416250739390017602691861266827287712839085046471071836484338080059876,
            13365872711519836528360683044306894559986949353205712646822787278885738688149
        );                                      
        
        vk.IC[42] = Pairing.G1Point( 
            2605767205529173955163953313860321656607686344836591364300909511402377421804,
            5429650507847639457045880953611422597253667597440299622721728675400300131250
        );                                      
        
        vk.IC[43] = Pairing.G1Point( 
            7247882997455298236295669249546090028908732413437381741146935102196014101124,
            5076739457307169130739014463798603524525051565728341914028035058356122846313
        );                                      
        
        vk.IC[44] = Pairing.G1Point( 
            8980979059783016904975986825813447501061586868862674731895227917331359906037,
            19682805033541374507990914772373201687550557104065732814033006907864858293354
        );                                      
        
        vk.IC[45] = Pairing.G1Point( 
            6644161970403672777475116619496966093556980751718418254365999557917520254567,
            19050834597262825782362183228123084480029195070316837929684257027536956311846
        );                                      
        
        vk.IC[46] = Pairing.G1Point( 
            14062175865454650153385256804035595248125633057883347858521481146011996286218,
            12271276762715287955738594480034837830020653856263628396919917730638553703421
        );                                      
        
        vk.IC[47] = Pairing.G1Point( 
            13911729641332908415198799734504721458599128505658719090900744634789621445915,
            8786091972100189597801601291217756616852118146055266552341864369392427836612
        );                                      
        
        vk.IC[48] = Pairing.G1Point( 
            8286790863373628447819182114427721896943004538555423694720378718059243573769,
            15263732997711163932335866919054875836707856736239996551957031210894255118323
        );                                      
        
        vk.IC[49] = Pairing.G1Point( 
            19894747669958469445673093758911671333206371419943261813059022061705846943748,
            12353612510909362999499032142169445680861417798508477706680307657532061914352
        );                                      
        
        vk.IC[50] = Pairing.G1Point( 
            9070614853369436971193723435745817517637568677329040693721681705838841075907,
            397092919082607845196943469640014807460407931452616263379459759585728603009
        );                                      
        
        vk.IC[51] = Pairing.G1Point( 
            11096779805702908366467582082515414994060812103711111633858570491326152109374,
            2258917929545218743549876189477875422759690475996285286360739975874525958260
        );                                      
        
        vk.IC[52] = Pairing.G1Point( 
            18464833313723979530041606458652387104540722997083538788143571250168073793023,
            5885440229872212623594691928169423132109611550248668510871785155240370298199
        );                                      
        
        vk.IC[53] = Pairing.G1Point( 
            4811259363574083622513911809652467279099945652704780351834634881830754149315,
            13528404657776116631744862248377378223138054930955886545758956223113556723962
        );                                      
        
        vk.IC[54] = Pairing.G1Point( 
            7192555077502848729097784220856216269181730717911799464906608630879441334627,
            111611409582273043539129906657254874542023508079335511913405526830925561491
        );                                      
        
        vk.IC[55] = Pairing.G1Point( 
            10109987120901242849723776249962749037972663450392525471620703165153439014211,
            21472874781765746685890449367481017727335788116873929478581253828204886025994
        );                                      
        
        vk.IC[56] = Pairing.G1Point( 
            13128629321246211926235425285073458052754050597066032750304270001083178602500,
            8101824094468650739840329740503959284064670674323314353780958513811231249487
        );                                      
        
        vk.IC[57] = Pairing.G1Point( 
            13748706814881490018688770569704039867438166503196795554750692980914860834715,
            11545984550722055011695000224186903247738015442993778393487239101252129945573
        );                                      
        
        vk.IC[58] = Pairing.G1Point( 
            8783560763170615798681956633550209958428854338976372145867864763388873377603,
            9671004177058181720240710726622006175345194596710754465500239611985808631093
        );                                      
        
        vk.IC[59] = Pairing.G1Point( 
            12388973203990970938137037921324740501214268901443313136906900649581175619077,
            796187385655831326821406401295478021482486604468262107343068372069823503180
        );                                      
        
        vk.IC[60] = Pairing.G1Point( 
            12230457029529949548241342188351593274523994229659416221150738312622121794024,
            11941478877467460592413277520158137491856542765743509337316550153258968071710
        );                                      
        
        vk.IC[61] = Pairing.G1Point( 
            17894453825118020484484083580372480669653992518004578198407470420363720676291,
            14713220811630287320350639634584183425888209830790389550635591845716723394954
        );                                      
        
        vk.IC[62] = Pairing.G1Point( 
            10190139961363255050787641846498945129545767468035308144744916657176233915692,
            18830229543699173494690136863517628088639492080779774398288923263231801287577
        );                                      
        
        vk.IC[63] = Pairing.G1Point( 
            10657504415226925789241211428583136684598758935273253174101167011948028417514,
            16019205630758795566124964627251755456563555234861691489511751596325275653674
        );                                      
        
        vk.IC[64] = Pairing.G1Point( 
            11385852039228425448615302405772618726704955587746225447973189478743261645608,
            4010640734299906265683514037662107904784614216867976981239983137405854231320
        );                                      
        
        vk.IC[65] = Pairing.G1Point( 
            10954710014560275473559733620336345516087441107423716778093731530953333826465,
            18379315579058925385178471722074349152805882701125724547334248849116062811074
        );                                      
        
        vk.IC[66] = Pairing.G1Point( 
            19260114025012140262263793671397704151348078219202624127324217899281297147840,
            13012425185147441174778028532736126550981051304023539641025587288503841815432
        );                                      
        
        vk.IC[67] = Pairing.G1Point( 
            9180882170407544289153661985646701342356757834780426750490234683503446142392,
            10571931947355701607125364315288089495980260962143471209306922822722257163784
        );                                      
        
        vk.IC[68] = Pairing.G1Point( 
            20635416636870927714296040151684936245301986944998970084796381657427225678899,
            14083738134390389368061401584695814657292701278726465132042575282622292463265
        );                                      
        
        vk.IC[69] = Pairing.G1Point( 
            4732301012473440553036067238613731903410100077026352064443363596832859090054,
            3506277014931002760828146172607657318331308173773761214443195506186709029509
        );                                      
        
        vk.IC[70] = Pairing.G1Point( 
            15824643170668423177164888512412747572024622899515971111863050740753328329832,
            13939925908028546165391025320519034799843040239340205857736419176605422263041
        );                                      
        
        vk.IC[71] = Pairing.G1Point( 
            7952303645588073674572358659313519664663009816152161588700218412737351097579,
            13775363818295820408833370981204572333707896212091025251535181654766591097634
        );                                      
        
        vk.IC[72] = Pairing.G1Point( 
            19782621446299207033787624414062697838756685495939389416592899553867283452489,
            3206568877214199585568702701674337977846896435315097994038387581073724412934
        );                                      
        
        vk.IC[73] = Pairing.G1Point( 
            8800718988147595585610070075581930560024681342426704276434101931296033447257,
            20399395039801738962072732781472809517654929272172740564227549769049110656005
        );                                      
        
        vk.IC[74] = Pairing.G1Point( 
            12015190796385951649355019554932756212391973594660935787517318683207595222129,
            19339901647364641390495653744613855979414687773676209731137730577749080465702
        );                                      
        
        vk.IC[75] = Pairing.G1Point( 
            15042145944013748397655352417728602830701446109508611435189421507699829227607,
            21387164290057265684378648119198386442975639486127927302024654925067135042580
        );                                      
        
        vk.IC[76] = Pairing.G1Point( 
            6471190276002949891920860519106391635318437095320451477681827408965105083197,
            3644261615820577733803886736700961856789499494821541746268285547252784154130
        );                                      
        
        vk.IC[77] = Pairing.G1Point( 
            18132052676182836608218188147210413983550579085749906843008904640681233005251,
            355472404187646008616490511130450844752767064107941763081953269896029223693
        );                                      
        
        vk.IC[78] = Pairing.G1Point( 
            15003125324554717903480782874251557653520031340229982261619395512312270178958,
            18144222873756717592037260324969802730890581080441343647819547422583633036158
        );                                      
        
        vk.IC[79] = Pairing.G1Point( 
            10554011458420332004864541015542316148726366993517849016509824924275601241980,
            3635231270991959491390894854972722995848727913202522566870863587431322764497
        );                                      
        
        vk.IC[80] = Pairing.G1Point( 
            16829040891779928090740268504037028848025297179464770715407824934440693718889,
            19509709075418559450650017538783061297475794509104791485074218720977031662059
        );                                      
        
        vk.IC[81] = Pairing.G1Point( 
            17627852081781248153160347513732770284481767159242634164407710678040774078045,
            18987294499858742322044438743033555325563869449350722156588541739685289225483
        );                                      
        
        vk.IC[82] = Pairing.G1Point( 
            3744444937901999040629237498914322317877948033776967842522204703642653680222,
            5701115505581075578134439298491997797009087492056473844531426971276124824806
        );                                      
        
        vk.IC[83] = Pairing.G1Point( 
            14032498119228099346238530797833506595313775262683654213383259635594168870224,
            14000367975534585967055716286057021873423094419361617958519256101314912736945
        );                                      
        
        vk.IC[84] = Pairing.G1Point( 
            20391275940402733981170186491898490714579536908999905254523443326267552907586,
            1398576310453604486886639388942407819599978206683245562028956320214092982048
        );                                      
        
        vk.IC[85] = Pairing.G1Point( 
            4605854641896656794523668908737222645970166773058749896138482383558707205083,
            9131776454531676718505589452426542079887751430151231027587625994343189034481
        );                                      
        
        vk.IC[86] = Pairing.G1Point( 
            13334460718852070881789006362128621763817004315787395053384727214077212424720,
            7966233554355337649571273937959355727126676866659697194814384505655698035453
        );                                      
        
        vk.IC[87] = Pairing.G1Point( 
            19239876461916554268510385389253956221132094928244277753801982038290392964093,
            10556661483226479374852277225047765962989531097145544492882806546325560731560
        );                                      
        
        vk.IC[88] = Pairing.G1Point( 
            8573496564257143918986730104223613542259760589228627027807218939473668522839,
            3432560404074895880407374898209241423928836915587310516505243677604087750468
        );                                      
        
        vk.IC[89] = Pairing.G1Point( 
            6204442771478839757972325327651575731521502296748469199107909743141287819061,
            15684343615959064036434039897821916024676731174407120972044449302954193590156
        );                                      
        
        vk.IC[90] = Pairing.G1Point( 
            11290017858570358096552127373518898349359438334541376063228408569665473246838,
            8138139186461901666523138541578984962965641020668955209654936925930973789406
        );                                      
        
        vk.IC[91] = Pairing.G1Point( 
            21036742947914671152551854599253490566749636886979744537384636687530703137884,
            10460481495605190215468793747537499860825085709364474529064577688628577726292
        );                                      
        
        vk.IC[92] = Pairing.G1Point( 
            5924354505989951754505736306386043903170439346966146125323891166769397222643,
            7874136928945740166116825885194133671004836861429677535812478564212084843642
        );                                      
        
        vk.IC[93] = Pairing.G1Point( 
            6803164976716830370139578729023238181510513679836801071131941775626644901837,
            21138728675790422518846835821952225636093614467123530136051210917522514106051
        );                                      
        
        vk.IC[94] = Pairing.G1Point( 
            19295291592256078533874318556561550887957048738419912759049351371728975429699,
            2886898845403266300356859412453846712946827037751358434305813739633144961034
        );                                      
        
        vk.IC[95] = Pairing.G1Point( 
            13894214911391705282083546443067244568184775534360111395497839947085323428212,
            21319791134362596194348162890119439378049827167808974750777265356778038628287
        );                                      
        
        vk.IC[96] = Pairing.G1Point( 
            7281767434574146273534569228220834879531235072402501293886436875501748323420,
            13410044402859534809521788911851140110412913062544006738060983971912500686750
        );                                      
        
        vk.IC[97] = Pairing.G1Point( 
            19264559413510589128915232926597537454881607435531809849819241048096610472164,
            17624075829951584823040477125795819846685818127925332045311571894763845313480
        );                                      
        
        vk.IC[98] = Pairing.G1Point( 
            16699139562221216852827262780484438426380527353644279732976071438091131091733,
            16941292850546938164465250438382495727762775937237771950019336882926148210746
        );                                      
        
        vk.IC[99] = Pairing.G1Point( 
            15188635517836051516041201467227236916978681027601346402269667336568305519861,
            16273941545645929216562333191702104482624042921585951665509722262882992285073
        );                                      
        
        vk.IC[100] = Pairing.G1Point( 
            1677837489866742467762882961809254760575525719834337047944792241162953211438,
            1885771677943891202364814918921318207740328828476669094612560453550492042659
        );                                      
        
        vk.IC[101] = Pairing.G1Point( 
            10202267593493257121809962226034731185523900104985084400882170886309006697053,
            3929161075660388671528551550958637656688629342554155375722309897528336252967
        );                                      
        
        vk.IC[102] = Pairing.G1Point( 
            5429338983212422252474287331877043820354858814263966472865488016503140804853,
            14545629206788821526739677913204273944862587558136247895441406044578105179054
        );                                      
        
        vk.IC[103] = Pairing.G1Point( 
            21816818000542712730788694879343394773607597634130813688937481759412805088609,
            16262245081990127873525705903336944251266511753710308105411116815384836668716
        );                                      
        
        vk.IC[104] = Pairing.G1Point( 
            17427196788348557964285350615377497277441535313402069387686466684104153218757,
            17928139535174354616699270073261839168172228239001410021740294981357383472820
        );                                      
        
        vk.IC[105] = Pairing.G1Point( 
            11891979512529123943656199159346775365395447398998791640982758147695968593626,
            14754319985779895913379979841874925769856201030980768638300230931863922592598
        );                                      
        
    }
    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length,"verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }
    /// @return r  bool true if proof is valid
    function verifyProof(
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[105] memory input
        ) public view returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}
